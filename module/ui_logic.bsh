import android.util.Log;

// Beanshell won't let me write "\0".
final String SEP = Character.toString ((char) 0);

Object dialog;          // Used to help coordinate the display of a "busy..." dialog
String parentTabgroup;  // Used to allow entities to be saved as children
String parentTabgroup__;// The tab group which was previously displayed
String redirectTab;     // makes newTab work as expected
String username = "";
String userid   = "";

setFileSyncEnabled(true);
setSyncDelay(5.0f);
setSyncEnabled(true);
setSyncMaxInterval(600.0f);
setSyncMinInterval(5.0f);

/******************************** STRING UTILS ********************************/
String replaceFirst(String haystack, String needle, String replacement) {
  i = haystack.indexOf(needle);
  if (i == -1)           return haystack;
  if (needle.equals("")) return haystack;
  pre  = haystack.substring(0, i                                   );
  post = haystack.substring(   i+needle.length(), haystack.length());
  return pre + replacement + post;
}

String replaceFirst(String haystack, String replacement) {
  return replaceFirst(haystack, "%s", replacement);
}

String translate(String s, Map m) {
  String out = "";

  for (char c : s) {
    String translation = m.get(c);

    if (isNull(translation)) out += c;
    else                     out += translation;
  }

  return out;
}

String escape(String s) {
  Map dict = new HashMap();
  dict.put('\"', "\\\"");
  dict.put('\\', "\\\\");
  dict.put('\b', "\\b" );
  dict.put('\f', "\\f" );
  dict.put('\n', "\\n" );
  dict.put('\r', "\\r" );

  return translate(s, dict);
}

String args2str(Object[] args) {
  String str = "";
  String sep = ", ";

  for (Object o : args) {
    if (o instanceof String) str += "\"" + escape(o) + "\"" + sep;
    else                     str +=               o         + sep;
  }

  // The loop adds a superfluous trailing separator. This removes it.
  str = str.substring(0, str.length() - sep.length());

  return str;
}

// "Function to string". Makes it very slightly less painful to write callback
// functions as strings.
String fun2str(String funName, Object[] args) {
  String argsStr = args2str(args);

  String str = "{funName}({argsStr})";
  str = replaceFirst(str, "{funName}", funName);
  str = replaceFirst(str, "{argsStr}", argsStr);

  return str;
}

String fun2str(String funName, Object args) {
  return fun2str(funName, new Object[]{args});
}

/******************************************************************************/
/*                           DOCUMENT OBJECT MODEL                            */
/******************************************************************************/
String  PREVIOUSLY_DISPLAYED_TAB_GROUP = "";
String  CURRENTLY_DISPLAYED_TAB_GROUP  = "";
Map     REF_TO_TYPE                    = new HashMap();
HashSet DATA_REFS                      = new HashSet();

REF_TO_TYPE.put("User/User/User", "dropdown");
REF_TO_TYPE.put("User/User/Log_in", "button");
REF_TO_TYPE.put("User/User/Sign_up", "button");
REF_TO_TYPE.put("Control/Main/Take_Feature", "button");
REF_TO_TYPE.put("Control/Main/Next_Object_ID", "input");
REF_TO_TYPE.put("Control/Main/GPS_Diagnostics", "gpsdiag");
REF_TO_TYPE.put("Control/Search", "group");
REF_TO_TYPE.put("Control/Search/Search_Term", "input");
REF_TO_TYPE.put("Control/Search/Search_Button", "button");
REF_TO_TYPE.put("Control/Search/Entity_Types", "dropdown");
REF_TO_TYPE.put("Control/Search/Entity_List", "list");
REF_TO_TYPE.put("Control/Table/Table", "input");
REF_TO_TYPE.put("Control/Map/Map", "map");
REF_TO_TYPE.put("Control/Map", "group");
REF_TO_TYPE.put("Control/Map/Centre_Me", "button");
REF_TO_TYPE.put("Control/Map/Create_Shape", "button");
REF_TO_TYPE.put("Burial_Mound/General/Object_ID", "input");
REF_TO_TYPE.put("Burial_Mound/General/Date", "input");
REF_TO_TYPE.put("Burial_Mound/General/Burial_Mound_author", "input");
REF_TO_TYPE.put("Burial_Mound/General/Type", "dropdown");
REF_TO_TYPE.put("Burial_Mound/General/Name_or_Other_ID", "input");
REF_TO_TYPE.put("Burial_Mound/General/Source", "dropdown");
REF_TO_TYPE.put("Burial_Mound/General/Description", "input");
REF_TO_TYPE.put("Burial_Mound/General/Surrounding_Landuse", "dropdown");
REF_TO_TYPE.put("Burial_Mound/General/Surface_Landuse", "dropdown");
REF_TO_TYPE.put("Burial_Mound/General/Prominence", "dropdown");
REF_TO_TYPE.put("Burial_Mound/General", "group");
REF_TO_TYPE.put("Burial_Mound/General/Latitude", "input");
REF_TO_TYPE.put("Burial_Mound/General/Longitude", "input");
REF_TO_TYPE.put("Burial_Mound/General", "group");
REF_TO_TYPE.put("Burial_Mound/General/Northing", "input");
REF_TO_TYPE.put("Burial_Mound/General/Easting", "input");
REF_TO_TYPE.put("Burial_Mound/General/Accuracy", "input");
REF_TO_TYPE.put("Burial_Mound/General/Take_From_GPS_1", "button");
REF_TO_TYPE.put("Burial_Mound/General/Elevation", "input");
REF_TO_TYPE.put("Burial_Mound/General/General_Notes", "input");
REF_TO_TYPE.put("Burial_Mound/General/Go_to_Map", "button");
REF_TO_TYPE.put("Burial_Mound/General/Facing_Direction", "dropdown");
REF_TO_TYPE.put("Burial_Mound/General/Mound_Overview_Photo", "camera");
REF_TO_TYPE.put("Burial_Mound/General/Mound_Overview_Photo_Button_1", "button");
REF_TO_TYPE.put("Burial_Mound/Dimensions", "group");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Length_Max", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Width_Max", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Height_Max", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Area_Max", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Length_Min", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Width_Min", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Height_Min", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Area_Min", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Other_Dimension", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Shape_Notes", "input");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Attach_a_Sketch", "file");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Attach_a_Sketch_Button_1", "button");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Sketch_Photo", "camera");
REF_TO_TYPE.put("Burial_Mound/Dimensions/Sketch_Photo_Button_1", "button");
REF_TO_TYPE.put("Burial_Mound/Material/Surface_Material_Description", "input");
REF_TO_TYPE.put("Burial_Mound/Material/Surface_Material_Density", "dropdown");
REF_TO_TYPE.put("Burial_Mound/Material/Sample_Collected", "radio");
REF_TO_TYPE.put("Burial_Mound/Material/Stone_Feature_Present_And_Visible", "radio");
REF_TO_TYPE.put("Burial_Mound/Material/Stone_Feature_Description", "input");
REF_TO_TYPE.put("Burial_Mound/Material/Material_Photo", "camera");
REF_TO_TYPE.put("Burial_Mound/Material/Material_Photo_Button_1", "button");
REF_TO_TYPE.put("Burial_Mound/CRM/Condition", "dropdown");
REF_TO_TYPE.put("Burial_Mound/CRM/Disturbance_Description", "input");
REF_TO_TYPE.put("Burial_Mound/CRM/Principal_Factors", "dropdown");
REF_TO_TYPE.put("Burial_Mound/CRM/Other_Sources_of_Impact", "checkbox");
REF_TO_TYPE.put("Burial_Mound/CRM/Age_of_Damage", "checkbox");
REF_TO_TYPE.put("Burial_Mound/CRM/RT_Number", "input");
REF_TO_TYPE.put("Burial_Mound/CRM/RT_Kind", "checkbox");
REF_TO_TYPE.put("Burial_Mound/CRM/RT_Method", "checkbox");
REF_TO_TYPE.put("Burial_Mound/CRM/RT_Description", "input");
REF_TO_TYPE.put("Burial_Mound/CRM/Volume_of_Soil_Removed_via_RT", "dropdown");
REF_TO_TYPE.put("Burial_Mound/CRM/Affect", "dropdown");
REF_TO_TYPE.put("Burial_Mound/CRM/Impact", "dropdown");
REF_TO_TYPE.put("Burial_Mound/CRM/Comments_and_Recommendations", "input");
REF_TO_TYPE.put("Burial_Mound/CRM/CRM_Photo", "camera");
REF_TO_TYPE.put("Burial_Mound/CRM/CRM_Photo_Button_1", "button");
REF_TO_TYPE.put("Shape/Shape_Note/Label", "input");
REF_TO_TYPE.put("Shape/Shape_Note/Note", "input");

DATA_REFS.add("Burial_Mound/General/Object_ID");
DATA_REFS.add("Burial_Mound/General/Date");
DATA_REFS.add("Burial_Mound/General/Burial_Mound_author");
DATA_REFS.add("Burial_Mound/General/Type");
DATA_REFS.add("Burial_Mound/General/Name_or_Other_ID");
DATA_REFS.add("Burial_Mound/General/Source");
DATA_REFS.add("Burial_Mound/General/Description");
DATA_REFS.add("Burial_Mound/General/Surrounding_Landuse");
DATA_REFS.add("Burial_Mound/General/Surface_Landuse");
DATA_REFS.add("Burial_Mound/General/Prominence");
DATA_REFS.add("Burial_Mound/General/Latitude");
DATA_REFS.add("Burial_Mound/General/Longitude");
DATA_REFS.add("Burial_Mound/General/Northing");
DATA_REFS.add("Burial_Mound/General/Easting");
DATA_REFS.add("Burial_Mound/General/Accuracy");
DATA_REFS.add("Burial_Mound/General/Elevation");
DATA_REFS.add("Burial_Mound/General/General_Notes");
DATA_REFS.add("Burial_Mound/General/Facing_Direction");
DATA_REFS.add("Burial_Mound/General/Mound_Overview_Photo");
DATA_REFS.add("Burial_Mound/Dimensions/Length_Max");
DATA_REFS.add("Burial_Mound/Dimensions/Width_Max");
DATA_REFS.add("Burial_Mound/Dimensions/Height_Max");
DATA_REFS.add("Burial_Mound/Dimensions/Area_Max");
DATA_REFS.add("Burial_Mound/Dimensions/Length_Min");
DATA_REFS.add("Burial_Mound/Dimensions/Width_Min");
DATA_REFS.add("Burial_Mound/Dimensions/Height_Min");
DATA_REFS.add("Burial_Mound/Dimensions/Area_Min");
DATA_REFS.add("Burial_Mound/Dimensions/Other_Dimension");
DATA_REFS.add("Burial_Mound/Dimensions/Shape_Notes");
DATA_REFS.add("Burial_Mound/Dimensions/Attach_a_Sketch");
DATA_REFS.add("Burial_Mound/Dimensions/Sketch_Photo");
DATA_REFS.add("Burial_Mound/Material/Surface_Material_Description");
DATA_REFS.add("Burial_Mound/Material/Surface_Material_Density");
DATA_REFS.add("Burial_Mound/Material/Sample_Collected");
DATA_REFS.add("Burial_Mound/Material/Stone_Feature_Present_And_Visible");
DATA_REFS.add("Burial_Mound/Material/Stone_Feature_Description");
DATA_REFS.add("Burial_Mound/Material/Material_Photo");
DATA_REFS.add("Burial_Mound/CRM/Condition");
DATA_REFS.add("Burial_Mound/CRM/Disturbance_Description");
DATA_REFS.add("Burial_Mound/CRM/Principal_Factors");
DATA_REFS.add("Burial_Mound/CRM/Other_Sources_of_Impact");
DATA_REFS.add("Burial_Mound/CRM/Age_of_Damage");
DATA_REFS.add("Burial_Mound/CRM/RT_Number");
DATA_REFS.add("Burial_Mound/CRM/RT_Kind");
DATA_REFS.add("Burial_Mound/CRM/RT_Method");
DATA_REFS.add("Burial_Mound/CRM/RT_Description");
DATA_REFS.add("Burial_Mound/CRM/Volume_of_Soil_Removed_via_RT");
DATA_REFS.add("Burial_Mound/CRM/Affect");
DATA_REFS.add("Burial_Mound/CRM/Impact");
DATA_REFS.add("Burial_Mound/CRM/Comments_and_Recommendations");
DATA_REFS.add("Burial_Mound/CRM/CRM_Photo");
DATA_REFS.add("Shape/Shape_Note/Label");
DATA_REFS.add("Shape/Shape_Note/Note");

String getType(String ref) {
  String type = REF_TO_TYPE.get(ref);
  if (type == null) return "";
  else              return type;
}

boolean hasData(String ref) {
  return DATA_REFS.contains(ref);
}

List getTabGroups() {
  List tabGroups = new ArrayList();
  tabGroups.add("User");
  tabGroups.add("Control");
  tabGroups.add("Burial_Mound");
  tabGroups.add("Shape");
  return tabGroups;
}

List getMenuTypes() {
  List menuTypes = new ArrayList();
  menuTypes.add("checkbox");
  menuTypes.add("dropdown");
  menuTypes.add("list");
  menuTypes.add("picture");
  menuTypes.add("radio");
  return menuTypes;
}

List getMediaTypes() {
  List mediaTypes = new ArrayList();
  mediaTypes.add("audio");
  mediaTypes.add("camera");
  mediaTypes.add("file");
  mediaTypes.add("video");
  return mediaTypes;
}

boolean isMenuType(String type) {
  return getMenuTypes().contains(type);
}

boolean isMediaType(String type) {
  return getMediaTypes().contains(type);
}

boolean hasMenuType(String ref) {
  String refType = getType(ref);
  return isMenuType(refType);
}

boolean hasMediaType(String ref) {
  String type = getType(ref);
  return isMediaType(type);
}

boolean isFlaggedNodata(String tabGroup) {
  List flaggedTabGroups = new ArrayList();
  flaggedTabGroups.add("User");
  flaggedTabGroups.add("Control");
  return flaggedTabGroups.contains(tabGroup);
}

void updateDisplayedTabGroup(String tabGroup) {
  PREVIOUSLY_DISPLAYED_TAB_GROUP = CURRENTLY_DISPLAYED_TAB_GROUP;
  CURRENTLY_DISPLAYED_TAB_GROUP  = tabGroup;
}

String getPreviousTabGroup() {
  return getPreviouslyDisplayedTabGroup();
}

String getPreviouslyDisplayedTabGroup() {
  return PREVIOUSLY_DISPLAYED_TAB_GROUP;
}

String getDisplayedTabGroup() {
  return CURRENTLY_DISPLAYED_TAB_GROUP;
}

boolean isDisplayed(String ref) {
  return getDisplayedTabGroup().equals(ref);
}

String getTabGroupRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabGroupRef(fullRef, lastPartOnly);
}

String getTabGroupRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 1) return null;
  return parts[0];
}

String getTabRef(String fullRef) {
  Boolean lastPartOnly = false;
  return getTabRef(fullRef, lastPartOnly);
}

String getTabRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 2) return null;
  if (lastPartOnly) return                  parts[1];
  else              return parts[0] + "/" + parts[1];
}

String getLastRefPart(String fullRef) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");
  return parts[parts.length-1];
}

String getGuiElementRef(String fullRef) {
  Boolean lastPartOnly = true;
  return getGuiElementRef(fullRef, lastPartOnly);
}

String getGuiElementRef(String fullRef, Boolean lastPartOnly) {
  if (isNull(fullRef)) {
    return null;
  }

  String[] parts = fullRef.split("/");

  if (parts.length < 3) return null;
  if (lastPartOnly) return parts[2];
  else              return fullRef;
}

String getArch16nKey(String ref) {
  String lastRefPart = getLastRefPart(ref);

  if (isNull(lastRefPart)) return null;
  else                     return "{" + lastRefPart + "}";
}

String guessArch16nVal(String ref) {
  String arch16nKey = getArch16nKey(ref);

  if (isNull(arch16nKey)) return "";
  arch16nKey = arch16nKey.replaceAll("_", " ");
  arch16nKey = arch16nKey.replaceAll("^\\{", "");
  arch16nKey = arch16nKey.replaceAll("\\}$", "");
  return arch16nKey;
}

String getAttributeName(String ref) {
  String guiElementRef = getGuiElementRef(ref);
  if (isNull(guiElementRef)) {
    return null;
  }

  String attributeName = guiElementRef.replaceAll("_", " ");
  return attributeName;
}

String getArchEntType(String ref) {
  String tabGroupRef = getTabGroupRef(ref);
  if (isNull(tabGroupRef)) {
    return null;
  }

  String archEntType = tabGroupRef.replaceAll("_", " ");
  return archEntType;
}

String getArchEntTypePascalCased(String ref) {
  String archEntType = getArchEntType(ref);
  if (archEntType == null) {
    return archEntType;
  }

  return archEntType.replaceAll(" ", "");
}

/******************************************************************************/
/*                            BINDING ACCUMULATOR                             */
/*                                                                            */
/* The binding accumulator allows onEvent bindings for the same element to    */
/* accumulate over multiple onEvent calls instead of having later calls       */
/* override earlier ones.                                                     */
/*                                                                            */
/* It also adds support for a several additional events:                      */
/*   - "blur" --- This is merely an interface to make code for adding "blur"  */
/*         events more consistent.                                            */
/*   - "copy" --- Triggered as a record is duplicated, immediately before it  */
/*         is first saved.                                                    */
/*   - "create" --- Triggered after a record is first created.                */
/*   - "delete" --- Triggered after a record is deleted.                      */
/*   - "prefetch" --- Triggered before the "fetch" event. More specifically,  */
/*         this event is triggered before a tab group is fetched and          */
/*         displayed.                                                         */
/*   - "fetch" --- Triggered after a record is fetched and displayed in a     */
/*         given tab group.                                                   */
/*   - "focus" --- This is merely an interface to make code for adding        */
/*         "focus" events more consistent.                                    */
/*   - "leave" --- Triggered after a given tab group is navigated away        */
/*         from. Note that this event cannot be triggered when the FAIMS app  */
/*         is exited.                                                         */
/*   - "save" --- Triggered each time a tab group is saved. This includes the */
/*         first time the tab group is saved as well as subsequent            */
/*         onSave(String, Boolean) calls.                                     */
/*                                                                            */
/* A single call to `bindOnEvents` must occur after all the `addOnEvent` and  */
/* `delOnEvents` calls. Calling `bindOnEvents` is what actually establishes   */
/* the bindings once they have been added to the accumulator.                 */
/******************************************************************************/
Map    EVENTS        = new HashMap(); // (ref, event type) -> callback statement
Set    CUSTOM_EVENTS = new HashSet(); // Events not handled by `onEvent`
CUSTOM_EVENTS.add("blur");
CUSTOM_EVENTS.add("copy");
CUSTOM_EVENTS.add("create");
CUSTOM_EVENTS.add("delete");
CUSTOM_EVENTS.add("fetch");
CUSTOM_EVENTS.add("focus");
CUSTOM_EVENTS.add("leave");
CUSTOM_EVENTS.add("prefetch");
CUSTOM_EVENTS.add("save");

String getKey(String ref, String event) {
  return ref + SEP + event;
}

/* Returns the set of statements bound to an element at `ref` and occuring on
 * `event`.
 */
ArrayList getStatements(String ref, String event) {
  String    key = getKey(ref, event);
  ArrayList val = (ArrayList) EVENTS.get(key);

  if (val == null) return new ArrayList();
  else             return val;
}

void addStatement(String ref, String event, String statement) {
  // In the case that a statement already exists for a given (`ref`, `event`)
  // pair, writing `val.add(statement);` will be enough to add the extra
  // statement. This is because `getStatements` returns a reference to a list.
  // In the case just described, the list is stored in the `EVENTS` map.
  // However, sometimes `getStatements` returns empty lists which are not stored
  // in that map. In this case, calling `EVENTS.put` is required.

  String    key = getKey(ref, event);
  ArrayList val = getStatements(ref, event);
  val.add(statement);
  EVENTS.put(key, val);
}

String getStatementsString(String ref, String event) {
  ArrayList stmts = getStatements(ref, event);
  String stmtsStr = "";
  for (String s : stmts) {
    stmtsStr += s;
    stmtsStr += "; ";
  }
  return stmtsStr;
}

boolean hasOnEvent(String ref, String event, String statement) {
  return getStatements(ref, event).contains(statement);
}

void delOnEvent(String ref, String event, String statement) {
  while(getStatements(ref, event).remove(statement));
}

void addOnEvent(String ref, String event, String statement) {
  // Calling `delOnEvent()` first ensures statement occurs once in the list, at
  // the end.
  delOnEvent  (ref, event, statement);
  addStatement(ref, event, statement);
}

void bindOnEvent(String ref, String event) {
  String stmtsStr     = getStatementsString(ref, event);
  String focusStmtStr = getStatementsString(ref, "focus");
  String blurStmtStr  = getStatementsString(ref, "blur" );

  if (!CUSTOM_EVENTS.contains(event)) {
    onEvent(ref, event, stmtsStr);
  } else if (event.equals("focus")) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else if (event.equals("blur" )) {
    onFocus(ref, focusStmtStr, blurStmtStr);
  } else {
    ; // Other events are implemented using auto-generated callback functions
  }
}

void bindOnEvents() {
  for (String key : EVENTS.keySet()) {
    refevent = key.split(SEP);
    ref   = refevent[0];
    event = refevent[1];
    bindOnEvent(ref, event);
  }
}

void onLeaveTabGroup() {
  onLeaveTabGroup(getPreviouslyDisplayedTabGroup());
}

/* Execute the "leave" event for the tab group at `ref` if a callback for it
 * exists.
 */
void onLeaveTabGroup(String ref) {
  String event    = "leave";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}

/* Establishes `onEvent` bindings necessary to make the "leave" event work. The
 * "leave" event is really triggered upon "show" of another tab.
 */
for (tg : getTabGroups()) {
  String ref      = tg;
  String event    = "show";
  String callback;

  // Update (previously) displayed tab group
  callback = fun2str("updateDisplayedTabGroup", ref);
  addOnEvent(ref, event, callback);

  // Trigger on leave tab group event
  callback = "onLeaveTabGroup()";
  addOnEvent(ref, event, callback);
}

/******************************* LOCALSETTINGS ********************************/
void makeLocalID(){
  fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
  fetchOne("DROP VIEW IF EXISTS parentchild;", null);
  fetchOne("CREATE VIEW parentchild AS "+
           "           SELECT parent.uuid as parentuuid, child.uuid as childuuid, parent.participatesverb as parentparticipatesverb, parent.relationshipid, parent.aenttypename as parentaenttypename, child.participatesverb as childparticipatesverb, child.aenttypename as childaenttypename, createdat"+
           "             FROM (SELECT uuid, participatesverb, aenttypename, relationshipid, relntimestamp as createdat"+
           "                     FROM latestnondeletedaentreln "+
           "                     JOIN relationship USING (relationshipid) "+
           "                     JOIN latestnondeletedarchent USING (uuid) "+
           "                     JOIN aenttype USING (aenttypeid)) parent "+
           "             JOIN (SELECT uuid, relationshipid, participatesverb, aenttypename "+
           "                     FROM latestnondeletedaentreln "+
           "                     JOIN relationship USING (relationshipid) "+
           "                     JOIN latestnondeletedarchent USING (uuid) "+
           "                     JOIN aenttype USING (aenttypeid)) child "+
           "               ON (parent.relationshipid = child.relationshipid AND parent.uuid != child.uuid)");
}
makeLocalID();

void insertIntoLocalSettings(String ref) {
  String val = getFieldValue(ref);
  insertIntoLocalSettings(ref, val);
}

void insertIntoLocalSettings(String key, String val) {
  fetchOne("REPLACE INTO localSettings(key, value) VALUES('" + key + "', '" + val + "');");
}

void insertIntoLocalSettings(String key, Integer val) {
  insertIntoLocalSettings(key, Integer.toString(val));
}

void insertIntoLocalSettingsOnChange(String ref) {
  String val = getFieldValue(ref);

  String insertCallback = fun2str("insertIntoLocalSettings", ref);

  addOnEvent(ref, "blur",  insertCallback);
  addOnEvent(ref, "click", insertCallback);
}

void setFieldValueFromLocalSettings(String key, String ref, boolean doOverwrite) {
  String val = getFieldValue(ref);
  if (!isNull(val) && !doOverwrite) {
    return;
  }

  String q = "SELECT value FROM localSettings WHERE key = '" + key + "';";
  fetchOne(q, new FetchCallback() {
    onFetch(result) {
      if (!isNull(result)) {
        setFieldValue(ref, result.get(0));
      }
    }
  });
}

void setFieldValueFromLocalSettings(String key, String ref) {
  boolean doOverwrite = false;
  setFieldValueFromLocalSettings(key, ref);
}

void setFieldValueFromLocalSettings(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettings(ref, ref, doOverwrite);
}

void setFieldValueFromLocalSettings(String ref) {
  setFieldValueFromLocalSettings(ref, false);
}

void setFieldValueFromLocalSettingsOnShow(String ref, boolean doOverwrite) {
  String cb = fun2str(
      "setFieldValueFromLocalSettings",
      new Object[]{ref, doOverwrite}
  );

  addOnEvent(getTabGroupRef(ref), "show", cb);
}

void setFieldValueFromLocalSettingsOnShow(String ref) {
  boolean doOverwrite = false;
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite);
}

/* Causes the value of the field given by `ref` to be saved each time it is
 * modified (on blur). The value of the field is restored when the tab group
 * containing the field is displayed.
 *
 * This function depends on `addOnEvent`. Therefore this function must be called
 * after `addOnEvent` is defined, but before `bindOnEvents` is called. This will
 * be so if the call is made in the autogenerator's `logic` tags.
 */
void persistOverSessions(String ref) {
  setFieldValueFromLocalSettingsOnShow(ref);
  insertIntoLocalSettingsOnChange     (ref);
}

void persistOverSessions(String ref, boolean doOverwrite) {
  setFieldValueFromLocalSettingsOnShow(ref, doOverwrite);
  insertIntoLocalSettingsOnChange     (ref);
}



/*************************** FIELD COPYING HELPERS ****************************/
/* Provides an easy way to copy field values, even between vocabs.            */
/******************************************************************************/
boolean setMenuValue(String ref, String vocabName) {
  String attrName = getAttributeName(ref);
  String vocabId = getVocabId(attrName, vocabName);

  if (isNull(vocabId))
    return false;
  else {
    setFieldValue(ref, vocabId);
    return true;
  }
}

void copyFieldValue(String src, String dst) {
  Boolean doFindVocabId = true;
  copyFieldValue(src, dst, doFindVocabId);
}

/* `src`           The ref of the source field.
 * `dst`           The ref of the destination field.
 * `doFindVocabId` If this is true, and the properties/attributes of `src` and
 *                 `dst` are different, `copyFieldValue` treats `src` and `dst`
 *                 as if they were menus. Therefore, to copy the value seen by
 *                 the user (i.e. the vocabName of `src`), a database query is
 *                 performed. The query determines the which vocabId of `dst`
 *                 will make it display the same vocabName as `src`.
 *
 *                 If `doFindVocabId` is false, the value returned by
 *                 `getFieldValue` is copied, without any database accesses.
 */
void copyFieldValue(String src, String dst, Boolean doFindVocabId) {
  String vocabIdSrc   = getFieldValue(src);
  String vocabNameSrc = getFieldValue(src, true);

  String attrNameSrc = getAttributeName(src);
  String attrNameDst = getAttributeName(dst);

  if (attrNameSrc.equals(attrNameDst) || !doFindVocabId) {
    setFieldValue(dst, vocabIdSrc);
    return;
  }

  if (!setMenuValue(dst, vocabNameSrc)) {
    // Fall back to dumb field copying
    copyFieldValue(src, dst, false);
  }
}

boolean isSelected(String ref, String vocabName) {
  String vocabNameActual = getMenuValue(ref);

  if (vocabNameActual == null)
    return vocabNameActual == vocabName;
  else
    return vocabNameActual.equals(vocabName);
}

void clearField(String ref) {
  switch(getType(ref)) {
    case "dropdown": setFieldValue(ref, null); break;
    case "list":     return;
    default:         setFieldValue(ref, "");
  }
}

void inheritFieldValue(
    String src,
    String dst,
    boolean doCheckParent,
    boolean doFindVocabId
) {
  String fun = "";
  fun += "if (!{check} || getDisplayedTabGroup().equals(\"{parent}\"))";
  fun += "  copyFieldValue(\"{src}\", \"{dst}\", {find})";

  fun = replaceFirst(fun, "{check}",  doCheckParent + "");
  fun = replaceFirst(fun, "{parent}", getTabGroupRef(src));
  fun = replaceFirst(fun, "{src}",    src);
  fun = replaceFirst(fun, "{dst}",    dst);
  fun = replaceFirst(fun, "{find}",   doFindVocabId + "");


  String dstParent = getTabGroupRef(dst);
  if (isFlaggedNodata(dstParent)) addOnEvent(dstParent, "show",   fun);
  else                            addOnEvent(dstParent, "create", fun);
}

/* If `doCheckParent`, then the value at `src` will only be inherited to `dst`
 * if `getTabGroupRef(src)` was the previously displayed tab group.
 */
void inheritFieldValue(String src, String dst, boolean doCheckParent) {
  inheritFieldValue(src, dst, doCheckParent, false);
}

void inheritFieldValue(String src, String dst) {
  inheritFieldValue(src, dst, true);
}



/**************************** NEW TAB REDIRECTION *****************************/
/* Causes a call to `newTab("tab/path")` to take the user to the specified    */
/* tab.                                                                       */
/******************************************************************************/

void newTab(String tab, Boolean resolveTabGroups) {
  if (!resolveTabGroups) {
    return newTab(tab);
  }

  String tabGroupRef = getTabGroupRef(tab);
  String tabRef      = getTabRef     (tab);

  if (!isDisplayed(tabGroupRef)) newTabGroup(tabGroupRef);
  if (!isNull     (tabRef     )) newTab     (tabRef);
}

/******************************************************************************/
/*                           DROPDOWN VALUE GETTER                            */
/*                                                                            */
/* For consistency with `getListItemValue()`.                                 */
/******************************************************************************/
String DROPDOWN_ITEM_VALUE = null;

String getDropdownItemValue() {
  return DROPDOWN_ITEM_VALUE;
}

addOnEvent("User/User/User", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"User/User/User\")");
addOnEvent("Control/Search/Entity_Types", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Control/Search/Entity_Types\")");
addOnEvent("Burial_Mound/General/Type", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/General/Type\")");
addOnEvent("Burial_Mound/General/Source", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/General/Source\")");
addOnEvent("Burial_Mound/General/Surrounding_Landuse", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/General/Surrounding_Landuse\")");
addOnEvent("Burial_Mound/General/Surface_Landuse", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/General/Surface_Landuse\")");
addOnEvent("Burial_Mound/General/Prominence", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/General/Prominence\")");
addOnEvent("Burial_Mound/General/Facing_Direction", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/General/Facing_Direction\")");
addOnEvent("Burial_Mound/Material/Surface_Material_Density", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/Material/Surface_Material_Density\")");
addOnEvent("Burial_Mound/CRM/Condition", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/CRM/Condition\")");
addOnEvent("Burial_Mound/CRM/Principal_Factors", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/CRM/Principal_Factors\")");
addOnEvent("Burial_Mound/CRM/Volume_of_Soil_Removed_via_RT", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/CRM/Volume_of_Soil_Removed_via_RT\")");
addOnEvent("Burial_Mound/CRM/Affect", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/CRM/Affect\")");
addOnEvent("Burial_Mound/CRM/Impact", "click", "DROPDOWN_ITEM_VALUE = getFieldValue(\"Burial_Mound/CRM/Impact\")");

/******************************************************************************/
/*                             MENU VALUE GETTER                              */
/*                                                                            */
/* Provides simple ways of getting a menu's vocabname as opposed to the       */
/* default, which is the vocabid.                                             */
/******************************************************************************/
// Map from vocabid to vocabname. Populated by `fetchMenuValues()`.
Map VOCABID_TO_VOCABNAME    = null;
Map VOCABNAME_TO_VOCABID    = null;
Map ATTRIB_NAME_TO_VOCABIDS = null;

void setVocabId(String attrName, String vocabName, String vocabId) {
  String key = attrName + SEP + vocabName;
  String val = vocabId;

  VOCABNAME_TO_VOCABID.put(key, val);
}

String getVocabId(String attrName, String vocabName) {
  return VOCABNAME_TO_VOCABID.get(attrName + SEP + vocabName);
}

void addVocabId(String attrName, String vocabId) {
  if (ATTRIB_NAME_TO_VOCABIDS == null)
    ATTRIB_NAME_TO_VOCABIDS = new HashMap();

  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attrName);
  if (vocabIds == null) {
    vocabIds = new ArrayList();
    ATTRIB_NAME_TO_VOCABIDS.put(attrName, vocabIds);
  }

  vocabIds.add(vocabId);
}

List getVocabIdsFromAttribName(String attribName) {
  List vocabIds = ATTRIB_NAME_TO_VOCABIDS.get(attribName);
  if (vocabIds == null) return new ArrayList();
  else                  return vocabIds;
}

List getVocabIdsFromRef(String ref) {
  String attribName = getAttributeName(ref);
  return getVocabIdsFromAttribName(attribName);
}

/*
 * Initialises `VOCABID_TO_VOCABNAME` with the (vocabid -> vocabname) mapping of
 * every menu.
 */
void fetchMenuValues() {
  VOCABID_TO_VOCABNAME = new HashMap();
  VOCABNAME_TO_VOCABID = new HashMap();

  String q = "";
  q += "    SELECT vocabid, vocabname, attributename";
  q += "      FROM vocabulary";
  q += " LEFT JOIN attributekey";
  q += "     USING (attributeid)";

  FetchCallback populateHashMap = new FetchCallback() {
    onFetch(result) {
      for (row : result) {
        String vocabId   = row.get(0);
        String vocabName = row.get(1);
        String attrName  = row.get(2);

        // Populate VOCABID_TO_VOCABNAME
        VOCABID_TO_VOCABNAME.put(vocabId, vocabName);

        // Populate VOCABNAME_TO_VOCABID
        setVocabId(attrName, vocabName, vocabId);

        // Populate ATTRIB_NAME_TO_VOCABIDS
        addVocabId(attrName, vocabId);
      }
    }
  };

  fetchAll(q, populateHashMap);
}

fetchMenuValues();

/* Returns a menu's vocabname, instead of the (counter-intuitive) vocabid.
 */
String getFieldValue(String ref, Boolean doConvertVocabIds) {
  if (!doConvertVocabIds) {
    return getFieldValue(ref);
  }

  String val       = getFieldValue(ref);
  String vocabName = VOCABID_TO_VOCABNAME.get(val);

  if (val       == null) return "";
  if (vocabName == null) return "";
  return vocabName;
}

/* Shorthand for writing getFieldValue(ref, true). This function's use is
 * discouraged in favour of writing `getFieldValue(ref, true)`.
 */
String getMenuValue(String ref) {
  return getFieldValue(ref, true);
}

/******************************************************************************/
/*                                 ACTION BAR                                 */
/******************************************************************************/
addActionBarItem("clean_synced_files", new ActionButtonCallback() {
  actionOnLabel() {
    "{Clean_Synced_Files}";
  }
  actionOn() {
    cleanSyncedFiles();
  }
});

addActionBarItem("sync", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Sync}";
  }
  actionOn() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
    showToast("{Sync_Disabled}");
  }
  isActionOff() {
    isSyncEnabled();
  }
  actionOffLabel() {
    "{Enable_Sync}";
  }
  actionOff() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
    showToast("{Sync_Enabled}");
  }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_Internal_GPS}";
  }
  actionOn() {
    stopGPS();
    showToast("{Internal_GPS_Disabled}");
    updateGPSDiagnostics();
  }
  isActionOff() {
    isInternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_Internal_GPS}";
  }
  actionOff() {
    if(isExternalGPSOn()) {
      stopGPS();
    }
    startInternalGPS();
    showToast("{Internal_GPS_Enabled}");
    updateGPSDiagnostics();
  }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
  actionOnLabel() {
    "{Disable_External_GPS}";
  }
  actionOn() {
    stopGPS();
    if (isBluetoothConnected()) {
      showToast("{External_GPS_Disabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
    }
    updateGPSDiagnostics();
  }
  isActionOff() {
    isExternalGPSOn();
  }
  actionOffLabel() {
    "{Enable_External_GPS}";
  }
  actionOff() {
    if(isInternalGPSOn()) {
      stopGPS();
    }
    startExternalGPS();
    if(isBluetoothConnected()) {
      showToast("{External_GPS_Enabled}");
    } else {
      showToast("{Please_Enable_Bluetooth}");
      this.actionOn();
    }
    updateGPSDiagnostics();
  }
});

/******************************************************************************/
/*                                    GPS                                     */
/******************************************************************************/
addOnEvent("Control/Main/GPS_Diagnostics", "show", "updateGPSDiagnostics()");

void updateGPSDiagnostics() {
  String diagnosticsRef = "Control/Main/GPS_Diagnostics";
  if (diagnosticsRef.equals("")) {
    return;
  }

  String status         = "";
  String previousStatus = getFieldValue(diagnosticsRef);
  String notInitialised = "{GPS_is_not_initialised}";

  // Check if GPS is initialised or was previously initialised.
  if (!isExternalGPSOn() && !isInternalGPSOn()) {
    if (!isNull(previousStatus) && !previousStatus.equals(notInitialised)) { // previous gps status is some last valid coordinate.
      // This is hackish. Arch16n substitution happens only at display-time, but the following if clause requires substitution to have happened at run-time
      String error = "";
      error = "{GPS_is_no_longer_initialised}. {Previous_status}:";
      setFieldValue(diagnosticsRef, error);   // Arch16n entry is substituted after this
      error = getFieldValue(diagnosticsRef);

      // check that error message wasn't previously appended to the previous status message.
      if (previousStatus.length()    >= error.length() &&
          previousStatus.subSequence(0, error.length()).equals(error)) {
        status = previousStatus;
      } else {
        status = error + "\n" + previousStatus;
      }
    } else {
      status = notInitialised;
    }
  } else {
    status += "{Internal_GPS}: ";
    if (isInternalGPSOn())
    {
      status += "{on}";
    } else {
      status += "{off}";
    }
    status += "\nExternal GPS: ";
    if (isExternalGPSOn())
    {
      if (isBluetoothConnected()) {
        status += "{on_and_bluetooth_connected}";
      } else {
        status += "{on_and_bluetooth_disconnected}";
      }
    } else {
      status += "{off}";
    }
    Object position = getGPSPosition();
    if (position != null) {
      Object projPosition = getGPSPositionProjected();
      status += "\n{Latitude}: " + position.getLatitude();
      status += "   {Longitude}: " + position.getLongitude();
      status += "\n{Northing}: " + projPosition.getLatitude();
      status += "   {Easting}: " + projPosition.getLongitude();
      status += "\n{Accuracy}: " + getGPSEstimatedAccuracy();
    } else {
      status += "\n{Position}: {no_GPS_position_could_be_found}";
    }
  }
  setFieldValue(diagnosticsRef, status);
}

/******************************************************************************/
/*                                 USER LOGIN                                 */
/******************************************************************************/
{
  userId           = "1";
  String nameFirst = "";
  String nameLast  = "";
  String email     = "";

  User user = new User(userId, nameFirst, nameLast, email);
  setUser(user);
}

String userMenuPath = "User/User/User";

void populateListForUsers(){
  String getNonDeletedUsersQuery = "SELECT userid, fname || ' ' || lname "+
                                   "  FROM user "+
                                   " WHERE userdeleted is null;";

  fetchAll(getNonDeletedUsersQuery, new FetchCallback() {
    onFetch(result) {
      populateDropDown(userMenuPath, result, true);
    }
  });
}

void selectUser() {
  String userVocabId = getFieldValue(userMenuPath);
  if (isNull(userVocabId)) {
    username = "";
    userid   = "";
    return;
  }

  String q = "";
  q += "SELECT userid, fname, lname, email, password";
  q += "  FROM user ";
  q += " WHERE userid = '{userId}'";
  q  = replaceFirst(q, "{userId}", userId);

  FetchCallback callback = new FetchCallback() {
    onFetch(result) {
      userId           = result.get(0);
      String nameFirst = result.get(1);
      String nameLast  = result.get(2);
      String email     = result.get(3);
      String password  = result.get(4);
      username         = nameFirst + " " + nameLast;

      User user = new User(userId, nameFirst, nameLast, email, password);
      setUser(user);
    }
  };

  fetchOne(q, callback);
}

addOnEvent(userMenuPath, "show",  "populateListForUsers()");
addOnEvent(userMenuPath, "click", "selectUser()");

/******************************************************************************/
/*                              MENU POPULATION                               */
/******************************************************************************/
/** Fetches the contents of a specifed vocabulary and stores it in the given list. **/
void fetchVocab(String vocabName, List storageList) {
  fetchVocab(vocabName, storageList, null);
}
void fetchVocab(String vocabName, List storageList, String callbackFunction) {
  fetchAll("select vocabid, vocabname from vocabulary left join attributekey using (attributeid) where attributename = '" + vocabName + "';", new FetchCallback() {
    onFetch(result) {
      storageList.addAll(result);
      Log.d("fetchVocab()", "Fetched vocabulary \"" + vocabname + "\" contents: " + result.toString());
      if (callbackFunction != null && !isNull(callbackFunction)) {
        execute(callbackFunction);
      }
    }
  });
}

/** Wrapper for to make a vocab without an exlusion list **/
void makeVocab(String type, String path, String attrib) {
  makeVocab(type, path, attrib, null);
}

/** Vocab Population **/
/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
void makeVocab(String type, String path, String attrib, List vocabExclusions) {
    makeVocab(type, path, attrib, vocabExclusions, null);
}

/* Populates the path specified vocabulary from the database based on the given attribute name, where type 
is the type of the vocab to populate (PictureGallery, HierarchicalPictureGallery, CheckBoxGroup, DropDown, HierarchicalDropDown, RadioGroup or List). */
void makeVocab(String type, String path, String attrib, List vocabExclusions, String callbackFunction){
  if (isNull(type) || isNull(path) || isNull(attrib)) {
    Log.e("makeVocab()", "Can't make populate a vocab when the given type, path or attribute is Null");
    return;
  }

  if (type.equals("PictureGallery")) {
    String pictureGalleryQuery = "SELECT vocabid, vocabname, pictureurl "+
                                 "  FROM vocabulary "+
                                 "  LEFT OUTER JOIN attributekey USING (attributeid) "+
                                 " WHERE attributename = '" + attrib + "' "+
                                 " ORDER BY  vocabcountorder;";
    fetchAll(pictureGalleryQuery, new FetchCallback() {
      onFetch(pictures) {
        populatePictureGallery(path, pictures);
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
    return;
  }

  if (type.equals("HierarchicalPictureGallery")) {
    populateHierarchicalPictureGallery(path, attrib);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  if (type.equals("HierarchicalDropDown")) {
    // populateHierarchicalDropDown(path, attrib);
    populateHierarchicalDropDown(path, attrib, true);
    if (callbackFunction != null && !isNull(callbackFunction)) {
      execute(callbackFunction);
    }
    return;
  }

  String getAttributeVocabQuery = "SELECT vocabid, vocabname "+
                                  "  FROM vocabulary "+
                                  "  JOIN attributekey USING (attributeid) "+
                                  " WHERE attributename = '" + attrib + "' "+
                                  " ORDER BY vocabcountorder;";
  fetchAll(getAttributeVocabQuery,
    new FetchCallback() {
      onFetch(result) {
        // print("makeVocab() result: " + result);
        if (result!=null && result.size()>0 && vocabExclusions!=null && vocabExclusions.size()>0) {
          List filteredVocab = new ArrayList();
          for(item : result) {
            if (vocabExclusions.contains(item.get(1))) {
              Log.d("makeVocab()", "removing vocab exclusion: " + item.get(1));
            } else {
              filteredVocab.add(item);
            }
          }
          result=filteredVocab;
        }
        Boolean hasNull =
                vocabExclusions == null
            || !vocabExclusions.contains("")
            && !vocabExclusions.contains(null);
        // print("makeVocab() filtered result: " + result);
        if(type.equals("CheckBoxGroup")) {
          populateCheckBoxGroup(path, result);
        } else if(type.equals("DropDown")) {
          // populateDropDown(path, result);
          populateDropDown(path, result, hasNull);
        } else if(type.equals("RadioGroup")) {
          populateRadioGroup(path, result);
        } else if(type.equals("List")) {
          populateList(path, result);
        }
        if (callbackFunction != null && !isNull(callbackFunction)) {
          execute(callbackFunction);
        }
      }
    });
}

makeVocab("DropDown", "Burial_Mound/General/Type", "Type");
makeVocab("DropDown", "Burial_Mound/General/Source", "Source");
makeVocab("HierarchicalDropDown", "Burial_Mound/General/Surrounding_Landuse", "Surrounding Landuse");
makeVocab("HierarchicalDropDown", "Burial_Mound/General/Surface_Landuse", "Surface Landuse");
makeVocab("DropDown", "Burial_Mound/General/Prominence", "Prominence");
makeVocab("DropDown", "Burial_Mound/General/Facing_Direction", "Facing Direction");
makeVocab("DropDown", "Burial_Mound/Material/Surface_Material_Density", "Surface Material Density");
makeVocab("RadioGroup", "Burial_Mound/Material/Sample_Collected", "Sample Collected");
makeVocab("RadioGroup", "Burial_Mound/Material/Stone_Feature_Present_And_Visible", "Stone Feature Present And Visible");
makeVocab("DropDown", "Burial_Mound/CRM/Condition", "Condition");
makeVocab("HierarchicalDropDown", "Burial_Mound/CRM/Principal_Factors", "Principal Factors");
makeVocab("CheckBoxGroup", "Burial_Mound/CRM/Other_Sources_of_Impact", "Other Sources of Impact");
makeVocab("CheckBoxGroup", "Burial_Mound/CRM/Age_of_Damage", "Age of Damage");
makeVocab("CheckBoxGroup", "Burial_Mound/CRM/RT_Kind", "RT Kind");
makeVocab("CheckBoxGroup", "Burial_Mound/CRM/RT_Method", "RT Method");
makeVocab("DropDown", "Burial_Mound/CRM/Volume_of_Soil_Removed_via_RT", "Volume of Soil Removed via RT");
makeVocab("DropDown", "Burial_Mound/CRM/Affect", "Affect");
makeVocab("DropDown", "Burial_Mound/CRM/Impact", "Impact");


/******************************************************************************/
/*                                 VALIDATION                                 */
/******************************************************************************/
/* `ref`  is a reference/path to a field
 * `name` is a human-readable name for that field
 * `cond` is a String containing a boolean expression that evaluates to true if
 *        and only if the the field pair returned by this function should be
 *        validated.
 *
 *  Returns a field pair (really just an ArrayList).
 */
List fieldPair(String ref, String name, String cond) {
  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);
  return fp;
}

List fieldPair(String ref, String name) {
  String t = "true";
  return fieldPair(ref, name, t);
}

/* Returns true if field specified by `ref` is valid. False otherwise.
 */
boolean isValidField(String ref) {
  return !isNull(getFieldValue(ref));
}
/* `format` can either be HTML or PLAINTEXT
 */
String validateFields(List fields, String format) {
  Integer numInvalid = 0;

  /* Build validation message string (and count how many invalid fields exist) */
  String out = "{please_fill_out_the_following_fields}";
  for(f : fields) {
    String ref  = f.get(0); // Reference to field
    String name = f.get(1); // Human-readable name
    String cond = f.get(2); // Validation condition

    // Only validate a field whose validation condition evaluates to `true`
    Boolean doValidateField = (Boolean) eval(cond);
    if (!doValidateField)
      continue;

    // Add any invalid fields to the output and tally them
    if (!isValidField(ref)) {
      out += "- " + name + "\n";
      numInvalid++;
    }
  }
  // All the fields are valid; just overwrite `out` with a cheery message
  if (numInvalid == 0)
    out = "{all_fields_contain_valid_data}";

  /* Format the output as dictated by `format` */
  if (format == "HTML") {
    out = out.replace("\n", "<br>");
  } else if (format == "PLAINTEXT") {
    ;
  }

  return out;
}

void validateControl() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Control/Main/Next_Object_ID", "{Next_Object_ID}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}
void validateBurialMound() {
  List f = new ArrayList(); // Fields to be validated
  f.add(fieldPair("Burial_Mound/General/Object_ID", "{Object_ID}"));
  f.add(fieldPair("Burial_Mound/CRM/Affect", "{Affect}"));
  f.add(fieldPair("Burial_Mound/CRM/Impact", "{Impact}"));

  String validationMessage = validateFields(f, "PLAINTEXT");
  showWarning("{validation_results}", validationMessage);
}


/******************************************************************************/
/*                                 AUTOSAVING                                 */
/******************************************************************************/
Map tabgroupToUuid = Collections.synchronizedMap(new HashMap());

String getUuid(String tabgroup) {
  return tabgroupToUuid.get(tabgroup);
}

void setUuid(String tabgroup, String uuid) {
  tabgroupToUuid.put(tabgroup, uuid);
}

void saveTabGroup(String tabgroup) {
  saveTabGroup(tabgroup, "");
}

void saveTabGroup(String tabgroup, String callback) {
  Boolean enableAutosave      = true;
  String  id                  = getUuid(tabgroup);
  List    geometry            = null;
  List    attributes          = null;
  String  parentTabgroup_     = parentTabgroup;
  String  parentTabgroupUuid_ = getUuid(parentTabgroup_);
  Boolean userWasSet          = !username.equals("");

  callback += "; onSave" + getArchEntTypePascalCased(tabgroup) + "__()";

  parentTabgroup = null;

  SaveCallback saveCallback  = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      // Make a child-parent relationship if need be.
      if (
          newRecord &&
          !isNull(parentTabgroup_) &&
          !isNull(parentTabgroupUuid_)
      ) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          parentTabgroupUuid_,
          uuid,
          "Parent Of",
          "Child Of",
          callback
        );
      } else {
        execute(callback);
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveTabGroup` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveTabGroup(tabgroup, callback);
      }

    }
    onError(message) {
      showToast(message);
    }
  };

  saveTabGroup(tabgroup, id, geometry, attributes, saveCallback, enableAutosave);
}

void setToTimestampNow(String ref) {
  String now = getTimestampNow();
  setFieldValue(ref, now);
}

String getTimestampNow() {
  String fmt = "yyyy-MM-dd HH:mm:ssZ";
  return getTimestampNow(fmt);
}

String getTimestampNow(String fmt) {
  date    = new Date();
  dateFmt = new java.text.SimpleDateFormat(fmt);
  dateStr = dateFmt.format(date);

  // Insert colon into timezone (e.g. +1000 -> +10:00)
  String left; String right;

  left    = dateStr.substring(0, dateStr.length() - 2);
  right   = dateStr.substring(   dateStr.length() - 2);
  dateStr = left + ":" + right;

  return dateStr;
}

void populateAuthorAndTimestamp(String tabgroup) {
  Map tabgroupToAuthor    = new HashMap();
  Map tabgroupToTimestamp = new HashMap();
  tabgroupToAuthor.put("Burial_Mound", "Burial_Mound/General/Burial_Mound_author");
  
  String authorPath    = tabgroupToAuthor.get(tabgroup);
  String timestampPath = tabgroupToTimestamp.get(tabgroup);

  String authorVal    = username;
  String timestampVal = getTimestampNow();

  if (!isNull(authorPath))    setFieldValue(authorPath,    authorVal);
  if (!isNull(timestampPath)) setFieldValue(timestampPath, timestampVal);
}

void onShowBurialMound () {
  saveTabGroup("Burial_Mound");
}

void onShowShape () {
  saveTabGroup("Shape");
}

addOnEvent("Burial_Mound", "show", "onShowBurialMound()");
addOnEvent("Shape", "show", "onShowShape()");

void onClickBurialMoundGeneralGotoMap () {
  newTab("Control/Map", true);
}

void onClickControlMainTakeFeature () {
  parentTabgroup__ = "Control";
  newBurialMound();
}

void onClickControlMapCreateShape () {
  parentTabgroup__ = "Control";
  newShape();
}


addOnEvent("Burial_Mound/General/Go_to_Map", "click", "onClickBurialMoundGeneralGotoMap()");
addOnEvent("Control/Main/Take_Feature", "click", "onClickControlMainTakeFeature()");
addOnEvent("Control/Map/Create_Shape", "click", "onClickControlMapCreateShape()");

/******************************************************************************/
/*                   AUDIO, CAMERA, FILE AND VIDEO BINDINGS                   */
/******************************************************************************/

addOnEvent("Burial_Mound/General/Mound_Overview_Photo_Button_1", "click", "attachPictureTo(\"Burial_Mound/General/Mound_Overview_Photo\")");
addOnEvent("Burial_Mound/Dimensions/Sketch_Photo_Button_1", "click", "attachPictureTo(\"Burial_Mound/Dimensions/Sketch_Photo\")");
addOnEvent("Burial_Mound/Material/Material_Photo_Button_1", "click", "attachPictureTo(\"Burial_Mound/Material/Material_Photo\")");
addOnEvent("Burial_Mound/CRM/CRM_Photo_Button_1", "click", "attachPictureTo(\"Burial_Mound/CRM/CRM_Photo\")");
addOnEvent("Burial_Mound/Dimensions/Attach_a_Sketch_Button_1", "click", "attachFileTo(\"Burial_Mound/Dimensions/Attach_a_Sketch\")");


/******************************************************************************/
/*                 BINDINGS FOR 'VIEW ATTACHED FILES' BUTTONS                 */
/******************************************************************************/


/******************************************************************************/
/*                             NAVIGATION DRAWER                              */
/******************************************************************************/
void removeNavigationButtons() {
  removeNavigationButton("new");
  removeNavigationButton("duplicate");
  removeNavigationButton("delete");
  removeNavigationButton("validate");
}

void addNavigationButtons(String tabgroup) {
  removeNavigationButtons();
  List tabgroupsToValidate = new ArrayList();
  tabgroupsToValidate.add("Control");
  tabgroupsToValidate.add("Burial_Mound");
  addNavigationButton("new", new ActionButtonCallback() {
    actionOnLabel() {
      "{New}";
    }
    actionOn() {
      if(isNull(getUuid(tabgroup))) {
        showAlert(
            "{Warning}",
            "{The_current_record_has_not_been_saved_yet}",
            fun2str("newRecord", new Object[]{tabgroup, true}),
            ""
        );
      } else {
        newRecord(tabgroup, true);
        showToast("{New_record_created}");
      }
    }
  }, "success");
  addNavigationButton("duplicate", new ActionButtonCallback() {
    actionOnLabel() {
      "{Duplicate}";
    }
    actionOn() {
      if(!isNull(getUuid(tabgroup))) {
        duplicateRecord(tabgroup);
      } else {
        showWarning("{Warning}", "{This_record_is_unsaved_and_cannot_be_duplicated}");
      }
    }
  }, "primary");
  addNavigationButton("delete", new ActionButtonCallback() {
    actionOnLabel() {
      "{Delete}";
    }
    actionOn() {
      deleteRecord(tabgroup);
    }
  }, "danger");
  if (tabgroupsToValidate.contains(tabgroup)) {
    addNavigationButton("validate", new ActionButtonCallback() {
      actionOnLabel() {
        "{Validate}";
      }
      actionOn() {
        String validationFunction = "validate" + tabgroup.replaceAll("_", "") + "()";
        eval(validationFunction);
      }
    }, "default");
  }
}

/******************************************************************************/
/*        ENTITY AND RELATIONSHIP SAVING AND LOADING HELPER FUNCTIONS         */
/******************************************************************************/
/** Saves two entity id's as a relation. **/
void saveEntitiesToRel(String type, String entity1, String entity2) {
  String callback = null;
  saveEntitiesToRel(type, entity1, entity2, callback);
}

/** Saves two entity id's as a relation with some callback executed. **/
void saveEntitiesToRel(String type, String entity1, String entity2, String callback) {
  String e1verb = null;
  String e2verb = null;
  saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb, callback);
}

/** Saves two entity id's as a hierachical relation with some callback executed. **/
void saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb, String callback) {
  if (isNull(entity1) || isNull(entity2)) return;
  saveRel(null, type, null, null, new SaveCallback() {
    onSave(rel_id, newRecord) {
      addReln(entity1, rel_id, e1verb);
      addReln(entity2, rel_id, e2verb);
      if(!isNull(callback)) {
         execute(callback);
      }
    }
    onError(message) {
      Log.e("saveEntitiesToHierRel", message);
      showToast(message);
    }
  });
}

// Makes a new record of the given tabgroup
void newRecord(String tabgroup) {
  boolean doUpdateRelVars = false;
  newRecord(tabgroup, doUpdateRelVars);
}

void newRecord(String tabgroup, boolean doUpdateRelVars) {
  if (doUpdateRelVars) {
    String uuidOld = getUuid(getDisplayedTabGroup());
    String q       = getDuplicateRelnQuery(uuidOld); // We're not duplicating
                                                     // anything, just getting
                                                     // the parent's UUID.

    cancelTabGroup(tabgroup, false);

    FetchCallback updateRelVars = new FetchCallback() {
      onFetch(result) {
        if (result != null && result.size() >= 1) {
          parentTabgroup   = result.get(0).get(4);
          parentTabgroup   = parentTabgroup.replaceAll(" ", "_");
          parentTabgroup__ = parentTabgroup;
        }

        newRecord(tabgroup, false);
      }
    };
    fetchAll(q, updateRelVars);
    return;
  }

  String newTabGroupFunction = "new" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "newTabgroup()"
  eval(newTabGroupFunction);

  Log.d("newRecord", tabgroup);
}

// Deletes the current record of the given tabgroup
void deleteRecord(String tabgroup) {
  String deleteTabGroupFunction = "delete" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "deleteTabgroup()"
  eval(deleteTabGroupFunction);

  Log.d("deleteRecord", tabgroup);
}

// Duplicates the current record of the given tabgroup
void duplicateRecord(String tabgroup) {
  dialog = showBusy("Duplicating", "Please wait...");

  String duplicateTabGroupFunction = "duplicate" + tabgroup.replaceAll("_", "") + "()"; // Typical value: "duplicateTabgroup()"
  eval(duplicateTabGroupFunction);

  Log.d("duplicateRecord", tabgroup);
}

// generic fetch saved attributes query
String getDuplicateAttributeQuery(String originalRecordID, String attributesToDupe) {
  if (attributesToDupe.equals("")) {
    attributesToDupe = "''";
  }
  String duplicateQuery = "SELECT attributename, freetext, vocabid, measure, certainty " +
                          "  FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) " +
                          " WHERE attributename IN ('', "+attributesToDupe+") " +
                          "   AND uuid = '"+originalRecordID+"'; ";
  return duplicateQuery;
}

String getDuplicateRelnQuery(String originalRecordID) {
  String dupeRelnQuery = "SELECT relntypename, parentparticipatesverb, childparticipatesverb, parentuuid, parentaenttypename, childaenttypename"+
                         "  FROM parentchild join relationship using (relationshipid) "+
                         "  JOIN relntype using (relntypeid) "+
                         " WHERE childuuid = '"+originalRecordID+"' " +
                         "   AND parentparticipatesverb = 'Parent Of' ";
  return dupeRelnQuery;
}

void makeDuplicateRelationships(fetchedAttributes, String newUuid){
  Log.e("Module", "makeDuplicateRelationships");
  for (savedAttribute : fetchedAttributes){
    String relntypename           = savedAttribute.get(0);
    String parentparticipatesverb = savedAttribute.get(1);
    String childparticipatesverb  = savedAttribute.get(2);
    String parentUuid             = savedAttribute.get(3);
    String childArchEntType       = savedAttribute.get(5);

    String onSaveRel              = "onSave" + childArchEntType.replaceAll(" ", "") + "__()";

    saveEntitiesToHierRel(
        relntypename,
        parentUuid,
        newUuid,
        parentparticipatesverb,
        childparticipatesverb,
        onSaveRel
    );
  }
}

// generic get extra attributes
List getExtraAttributes(fetchedAttributes) {
  List extraAttributes = createAttributeList();
  Log.d("Module", "Duplicating fetched attributes: " + fetchedAttributes.toString());
  for (savedAttribute : fetchedAttributes) {
    extraAttributes.add(
      createEntityAttribute(
        savedAttribute.get(0),
        savedAttribute.get(1),
        savedAttribute.get(2),
        savedAttribute.get(3),
        savedAttribute.get(4)
      )
    );
  }
  return extraAttributes;
}

void loadEntity() {
  loadEntity(false);
}
void loadEntity(Boolean isDropdown) {
  if (isDropdown) {
    loadEntityFrom(getDropdownItemValue());
  } else {
    loadEntityFrom(getListItemValue());
  }
}

void loadEntityFrom(String entityID) {
  if (isNull(entityID)) {
    return;
  }

  String getEntTypeNameQ = "SELECT aenttypename " +
                           "  FROM latestnondeletedarchent " +
                           "  JOIN aenttype " +
                           " USING (aenttypeid) " +
                           " WHERE uuid = '" + entityID + "'";
  fetchAll(getEntTypeNameQ, new FetchCallback() {
    onFetch(result) {
      if (
          result               == null ||
          result       .size() == 0    ||
          result.get(0).size() == 0
      ) {
        String head  = "{err_load_entity_head}";
        String body  = "{err_load_entity_body}";
        showWarning(head, body);
        return;
      }

      String archEntName = result.get(0).get(0).replaceAll(" ", "");
      String loadFunction = "load" + archEntName + "From(entityID)"; // Typical value: loadContextFrom(entityID)
      eval(loadFunction);
    }
  });
}

void newBurialMound (){
  String tabgroup = "Burial_Mound";
  if (isNull("Control/Main/Next_Object_ID")) {
    showWarning("{Alert}", "{A_next_ID_has_not_been_entered_please_provide_one}");
    return;
  }

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  incAutoNum("Burial_Mound/General/Object_ID");

  onCreateBurialMound__();
}
void newShape (){
  String tabgroup = "Shape";
  

  setUuid(tabgroup, null);
  newTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  

  onCreateShape__();
}
void onCreateBurialMound__(){
  String ref      = "Burial_Mound";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCreateShape__(){
  String ref      = "Shape";
  String event    = "create";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchBurialMound__(){
  String ref      = "Burial_Mound";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onPrefetchShape__(){
  String ref      = "Shape";
  String event    = "prefetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchBurialMound__(){
  String ref      = "Burial_Mound";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onFetchShape__(){
  String ref      = "Shape";
  String event    = "fetch";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveBurialMound__(){
  String ref      = "Burial_Mound";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onSaveShape__(){
  String ref      = "Shape";
  String event    = "save";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyBurialMound__(){
  String ref      = "Burial_Mound";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onCopyShape__(){
  String ref      = "Shape";
  String event    = "copy";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteBurialMound__(){
  String ref      = "Burial_Mound";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void onDeleteShape__(){
  String ref      = "Shape";
  String event    = "delete";
  String stmtsStr = getStatementsString(ref, event);
  execute(stmtsStr);
}
void duplicateBurialMound(){
  String tabgroup = "Burial_Mound";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  incAutoNum("Burial_Mound/General/Object_ID");
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  populateCameraPictureGallery("Burial_Mound/General/Mound_Overview_Photo", new ArrayList());
  populateFileList("Burial_Mound/Dimensions/Attach_a_Sketch", new ArrayList());
  populateCameraPictureGallery("Burial_Mound/Dimensions/Sketch_Photo", new ArrayList());
  populateCameraPictureGallery("Burial_Mound/Material/Material_Photo", new ArrayList());
  populateCameraPictureGallery("Burial_Mound/CRM/CRM_Photo", new ArrayList());
  onCopyBurialMound__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      excludeAttributes.add("Mound Overview Photo");
      excludeAttributes.add("Attach a Sketch");
      excludeAttributes.add("Sketch Photo");
      excludeAttributes.add("Material Photo");
      excludeAttributes.add("CRM Photo");

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void duplicateShape(){
  String tabgroup = "Shape";
  String uuidOld = getUuid(tabgroup);
  setUuid(tabgroup, "");
  disableAutoSave(tabgroup);
  
  clearGpsInTabGroup(tabgroup);
  populateAuthorAndTimestamp(tabgroup);
  populateEntityListsInTabGroup(tabgroup);
  
  onCopyShape__();

  saveCallback = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);

      fetchAll(getDuplicateRelnQuery(uuidOld), new FetchCallback(){
        onFetch(result) {
          Log.e("Module", result.toString());

          if (result != null && result.size() >= 1) {
            parentTabgroup__ = result.get(0).get(4);
            parentTabgroup__ = parentTabgroup__.replaceAll(" ", "_");
          }

          makeDuplicateRelationships(result, getUuid(tabgroup));

          showToast("{Duplicated_record}");
          dialog.dismiss();
        }
      });

      saveTabGroup(tabgroup);
    }
  };

  String extraDupeAttributes = "";
  fetchAll(getDuplicateAttributeQuery(uuidOld, extraDupeAttributes), new FetchCallback(){
    onFetch(result) {
      excludeAttributes = new ArrayList();

      

      duplicateTabGroup(tabgroup, null, getExtraAttributes(result), excludeAttributes, saveCallback);
    }
  });
}
void deleteBurialMound(){
  String tabgroup = "Burial_Mound";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteBurialMound()", "doNotDelete()");
  }
}
void deleteShape(){
  String tabgroup = "Shape";
  if (isNull(getUuid(tabgroup))) {
    cancelTabGroup(tabgroup, true);
  } else {
    showAlert("{Confirm_Deletion}", "{Press_OK_to_Delete_this_Record}", "reallyDeleteShape()", "doNotDelete()");
  }
}
void reallyDeleteBurialMound (){
  String tabgroup = "Burial_Mound";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteBurialMound__();
}
void reallyDeleteShape (){
  String tabgroup = "Shape";

  deleteArchEnt(getUuid(tabgroup));
  cancelTabGroup(tabgroup, false);
  populateEntityListsOfArchEnt(tabgroup);
  onDeleteShape__();
}
addOnEvent("Burial_Mound", "save", "populateEntityListsOfArchEnt(\"Burial_Mound\")");
addOnEvent("Shape", "save", "populateEntityListsOfArchEnt(\"Shape\")");

void doNotDelete(){
  showToast("{Delete_Cancelled}");
}

addOnEvent("User", "show", "removeNavigationButtons()");
addOnEvent("Control", "show", "removeNavigationButtons()");
addOnEvent("Burial_Mound", "show", "removeNavigationButtons()");
addOnEvent("Shape", "show", "removeNavigationButtons()");
addOnEvent("Burial_Mound", "show", "addNavigationButtons(\"Burial_Mound\")");
addOnEvent("Shape", "show", "addNavigationButtons(\"Shape\")");

/******************************************************************************/
/*                                   SEARCH                                   */
/******************************************************************************/
addOnEvent("Control/Search"               , "show"  , "search()");
addOnEvent("Control/Search/Entity_List"   , "click" , "loadEntity();");
addOnEvent("Control/Search/Search_Button" , "click" , "search()");
addOnEvent("Control/Search/Search_Term"   , "click" , "clearSearch()");

addOnEvent("Control/Search/Entity_Types"  , "click" , "search()");
entityTypes = new ArrayList();
entityTypes.add(new NameValuePair("{All}", ""));
entityTypes.add(new NameValuePair("{Burial_Mound}", "Burial Mound"));
entityTypes.add(new NameValuePair("{Shape}", "Shape"));
populateDropDown("Control/Search/Entity_Types", entityTypes);

void clearSearch(){
  setFieldValue("Control/Search/Search_Term","");
}

void search(){
  String refEntityList  = "Control/Search/Entity_List";
  String refSearchTerm  = "Control/Search/Search_Term";
  String refEntityTypes = "Control/Search/Entity_Types";

  String type = getFieldValue(refEntityTypes);
  String term = getFieldValue(refSearchTerm);
  String searchQuery = "SELECT uuid, response "+
                       "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
                       " WHERE uuid in (SELECT uuid "+
                       "                  FROM latestNonDeletedArchEntIdentifiers "+
                       "                 WHERE measure LIKE '"+term+"'||'%'  "+
                       "                   AND ( aenttypename = '"+type+"' OR '' = '"+type+"' ) "+
                       "                )  "+
                       " ORDER BY response "+
                       " LIMIT ? "+
                       "OFFSET ? ";

  populateCursorList(refEntityList, searchQuery, 25);
  refreshTabgroupCSS("Control");

  Log.d("Module", "Search query: " + searchQuery);
}

void loadBurialMoundFrom(String uuid) {
  String tabgroup = "Burial_Mound";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchBurialMound__();
    }
  };

  onPrefetchBurialMound__();
  showTabGroup(tabgroup, uuid, cb);
}
void loadShapeFrom(String uuid) {
  String tabgroup = "Shape";
  setUuid(tabgroup, uuid);
  if (isNull(uuid)) return;

  FetchCallback cb = new FetchCallback() {
    onFetch(result) {
      populateEntityListsInTabGroup(tabgroup);
      onFetchShape__();
    }
  };

  onPrefetchShape__();
  showTabGroup(tabgroup, uuid, cb);
}

/******************************************************************************/
/*                          TAKE FROM GPS BUTTON(S)                           */
/******************************************************************************/
addOnEvent("Burial_Mound/General/Take_From_GPS_1", "click", "takePoint(\"Burial_Mound\")");

Map getTakeFromGpsMappings() {
  Map tabgroupToTabRef = new HashMap();
  tabgroupToTabRef.put("Burial_Mound", "Burial_Mound/General");
  return tabgroupToTabRef;
}

/* Takes the current point using gps. */
void takePoint(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String archEntType = tabgroup.replaceAll("_", " ");
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)){
    showToast("{Please_enter_data_first}");
    return;
  }

  boolean isInternalGPSOff = !isInternalGPSOn();
  boolean isExternalGPSOff = !isExternalGPSOn();
  Object  position = getGPSPosition();
  if (position == null || isInternalGPSOff && isExternalGPSOff) {
    showToast("{GPS_Not_Initialised}");
    return;
  }

  Object projPosition = getGPSPositionProjected();
  Double latitude     = position.getLatitude();
  Double longitude    = position.getLongitude();
  Double northing     = projPosition.getLatitude();
  Double easting      = projPosition.getLongitude();

  samplePoint = new Point(new MapPos(easting, northing), null, (PointStyle) null, null);
  ArrayList geolist = new ArrayList();
  geolist.add(samplePoint);

  String accuracy = "" + getGPSEstimatedAccuracy();
  setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Accuracy", accuracy);

  saveArchEnt(currentUuid, archEntType, geolist, null, new SaveCallback() {
    onSave(uuid, newRecord) {
      print("[takePoint()] Added geometry: " + geolist);
      fillInGPS(tabgroup);
    }
  });
}

/* Sets the value of GPS views for the given tab path. */
void fillInGPS(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();
  String currentUuid = getUuid(tabgroup);
  if (isNull(currentUuid)) {
    return;
  }

  String query = "SELECT x(transform(geospatialcolumn,                4326)) as longtiude, " +
                 "       y(transform(geospatialcolumn,                4326)) as latitude, " +
                 "       x(transform(geospatialcolumn, "+getModuleSrid()+")) as easting, " +
                 "       y(transform(geospatialcolumn, "+getModuleSrid()+")) as northing " +
                 "  FROM latestnondeletedarchent, vocabulary " +
                 " WHERE uuid = '" + currentUuid + "';";

  fetchOne(query, new FetchCallback() {
    onFetch(result) {
      print("[fillInGPS()] Fetched DB transformed geometry: " + result);
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Longitude" , result.get(0));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Latitude"  , result.get(1));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Easting"   , result.get(2));
      setFieldValue(tabgroupToTabRef.get(tabgroup) + "/Northing"  , result.get(3));
    }
  });
}

void clearGpsInTabGroup(String tabgroup) {
  Map tabgroupToTabRef = getTakeFromGpsMappings();

  String tabRef = tabgroupToTabRef.get(tabgroup);
  if (isNull(tabRef)) return;

  clearGpsInTab(tabRef);
}

void clearGpsInTab(String tabRef) {
  setFieldValue(tabRef + "/Accuracy"  , "");
  setFieldValue(tabRef + "/Latitude"  , "");
  setFieldValue(tabRef + "/Longitude" , "");
  setFieldValue(tabRef + "/Easting"   , "");
  setFieldValue(tabRef + "/Northing"  , "");
}

/*************** LOADING AND CREATION OF RECORDS FROM QR CODES ****************/
void bindQrScanning(String refButton, String refField) {
  String event = "click";

  String stmt = fun2str("scanRecordFromQrCode", refField);

  addOnEvent(refButton, event, stmt);
}

void scanRecordFromQrCode(String ref) {
  String callback = fun2str("loadOrCreateEntityFromScannedAttrib", ref);
  scanCode(callback);
}

void loadOrCreateEntityFromScannedAttrib(String ref) {
  String attrName = getAttributeName(ref);
  String attribVal  = getLastScanContents();

  String q = "";
  q += "SELECT uuid ";
  q += "  FROM latestnondeletedaentvalue ";
  q += "  JOIN latestnondeletedarchent USING (uuid) ";
  q += "  JOIN attributekey            USING (attributeid) ";
  q += " WHERE attributename = '{attrName}' ";
  q += "   AND measure       = '{attribVal}' ";
  q  = replaceFirst(q, "{attrName}",  attrName);
  q  = replaceFirst(q, "{attribVal}", attribVal );

  FetchCallback loadOrCreateEntity = new FetchCallback() {
    onFetch(result) {
      if (isNull(result) || result.size() == 0) {
        createRecordFromScannedAttrib(ref);
      } else {
        String uuid = result.get(0).get(0);
        loadEntityFrom(uuid);
      }
    }
  };

  fetchAll(q, loadOrCreateEntity);
}

void initScannedAttrib(String ref) {
  String oldCode = getFieldValue(ref);
  String newCode = getLastScanContents();

  if (isNull(oldCode))
    setFieldValue(ref, newCode);
}

void createRecordFromScannedAttrib(String ref) {
  String tabGroup = getTabGroupRef(ref);
  newRecord(tabGroup);

  initScannedAttrib(ref);
}



/******************************************************************************/
/*                       AUTONUMBERING HELPER FUNCTIONS                       */
/******************************************************************************/
/*
 * If value of field specified by `ref` is null, sets the field to `defaultVal`,
 * otherwise increments its value.
 *
 * Returns the value the field was updated to.
 */
Integer incField(String ref, Integer defaultVal) {
  String val = getFieldValue(ref);

  if (isNull(val)) {
    setFieldValue(ref, defaultVal);
    return defaultVal;
  }

  Integer inc = Integer.parseInt(val) + 1;
  setFieldValue(ref, inc);
  insertIntoLocalSettings(ref, inc.toString());

  return inc;
}

/* Increments the field at `ref` or returns null if it does not contain a
 * number.
 */
Integer incField(String ref) {
  return incField(ref, 1);
}

List getStartingIdPaths() {
  List l = new ArrayList();
  l.add("Control/Main/Next_Object_ID");
  return l;
}

void loadStartingId(String ref) {
  // If there's already a value in the field, we don't need to load one.
  String val = getFieldValue(ref);
  if (!isNull(val)) {
    return;
  }

  // Load a value into the field. Set it to 1 if no value has been previously
  // saved.
  String idQ = "SELECT value FROM localSettings WHERE key = '" + ref + "';";
  fetchOne(idQ, new FetchCallback() {
    onFetch(result) {
      if (isNull(result)) setFieldValue(ref, "1"          );
      else                setFieldValue(ref, result.get(0));
    }
  });
}

loadStartingIds() {
  List l = getStartingIdPaths();

  for (ref : l) {
    loadStartingId(ref);
  }
}

addOnEvent("Control", "show", "loadStartingIds()");

/*
 * Sets bindings to save autonum'd fields whenever they're blurred.
 */
for (ref : getStartingIdPaths()) {
  onFocus(ref, null, "insertIntoLocalSettings(\"" + ref + "\", getFieldValue(\"" + ref + "\"));");
}

void incAutoNum(String destPath) {
  Map destToSource = new HashMap();
  destToSource.put("Burial_Mound/General/Object_ID", "Control/Main/Next_Object_ID");

  String sourcePath = destToSource.get(destPath);
  String destVal    = getFieldValue(sourcePath);
  setFieldValue(destPath, destVal);
  incField(sourcePath);
}

/******************************************************************************/
/*                POPULATION OF ENTITY AND CHILD ENTITY LISTS                 */
/******************************************************************************/
/*
 * `viewType`   the type of GUI element to be populated. It can either equal
 *              "DropDown" or "List".
 * `path`       the reference of the GUI element to be populated.
 * `parentUuid` the parent in the relationship denoted by `relType`.
 * `entType`    the type of the entities the menu will be populated with.
 * `relType`    the name of the relationship the children are to be in with the
 *              entity denoted by `parentUuid`.
 */
void populateMenuWithEntities (
  String viewType,
  String path,
  String parentUuid,
  String entType,
  String relType
) {
  if (!"DropDown".equals(viewType) && !"List".equals(viewType)) {
    Log.e("populateMenuWithEntities ", "Unexpected type '" + viewType + "'");
    return;
  }

  String limit;
  switch (viewType) {
    case "DropDown": limit = "";                   break;
    case "List":     limit = " LIMIT ? OFFSET ? "; break;
  }

  String getChildEntitiesQ = "" +
    "SELECT childuuid, response " +
    "  FROM (select childuuid, createdat" +
    "          from (select childuuid, createdat, relationshipid" +
    "                    from parentchild" +
    "                   where parentuuid = '" + parentUuid + "' " +
    "                   and (childaenttypename = '"+entType+"')" +
    "                   order by createdat           " +
    "                   )" +
    "          JOIN (SELECT relationshipid   " +
    "                  FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  " +
    "                 WHERE relntypename = '"+relType+"') USING (relationshipid)" +
    "          order by createdat desc" +
    limit +
    "        )  " +
    "  JOIN latestNonDeletedArchEntFormattedIdentifiers ON (childuuid = uuid)   " +
    "  order by createdat desc";

  String getEntitiesQ = "" +
    "SELECT uuid, response "+
    "  FROM latestNonDeletedArchEntFormattedIdentifiers  "+
    " WHERE uuid in (SELECT uuid "+
    "                  FROM latestNonDeletedArchEntIdentifiers "+
    "                 WHERE aenttypename = '"+entType+"' OR '"+entType+"' = '' " +
    "               )  "+
    " ORDER BY response " +
    limit;

  FetchCallback cbPopulateDropDown = new FetchCallback() {
    onFetch(result) {
      populateDropDown(path, result, true);
    }
  };

  String q;
  if (relType.equals("")) q = getEntitiesQ;
  else                    q = getChildEntitiesQ;

  switch (viewType) {
    case "DropDown": fetchAll(q, cbPopulateDropDown); break;
    case "List":     populateCursorList(path, q, 25); break;
  }
}

void populateEntityListsInTabGroup(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  for (m : ENTITY_MENUS) {
    String path         = m[1];
    String menuTabGroup = getTabGroupRef(path);
    String functionCall = getEntityMenuPopulationFunction(m);

    if (menuTabGroup.equals(tabGroup))
      execute(functionCall);
  }
}

/* Populates each list containing records whose archent type is the same as that
 * of `tabGroup`.
 */
void populateEntityListsOfArchEnt(String tabGroup) {
  if (isNull(tabGroup)) {
    return;
  }

  String archEntTypeToPopulate = getArchEntType(tabGroup);

  for (m : ENTITY_MENUS) {
    String archEntType  = m[3];
    String functionCall = getEntityMenuPopulationFunction(m);

    if (archEntType.equals(archEntTypeToPopulate))
      execute(functionCall);
  }
}

String getEntityMenuPopulationFunction(String[] menuDescriptor) {
  String viewType       = menuDescriptor[0];
  String path           = menuDescriptor[1];
  String parentUuidCall = menuDescriptor[2];
  String entType        = menuDescriptor[3];
  String relType        = menuDescriptor[4];

  String functionCall = "";
  functionCall += "populateMenuWithEntities(";
  functionCall += "\"" + viewType       + "\"";
  functionCall += ", ";
  functionCall += "\"" + path           + "\"";
  functionCall += ", ";
  functionCall +=        parentUuidCall       ;
  functionCall += ", ";
  functionCall += "\"" + entType        + "\"";
  functionCall += ", ";
  functionCall += "\"" + relType        + "\"";
  functionCall += ")";

  return functionCall;
}

ENTITY_MENUS = new ArrayList();

for (m : ENTITY_MENUS) {
  String functionCall = getEntityMenuPopulationFunction(m);
  execute(functionCall);
}
for (m : ENTITY_MENUS) {
  String menuRef = m[1];

  String ref = getTabRef(menuRef);
  String evt = "show";
  String cmd = "clearField(\"{menuRef}\")";
  cmd = replaceFirst(cmd, "{menuRef}", menuRef);

  addOnEvent(ref, evt, cmd);
}


/******************************************************************************/
/*                             HANDWRITTEN LOGIC                              */
/******************************************************************************/

/************************************ MAP *************************************/
DATA_ENTRY_LAYER    = "Data Entry Layer";
DATA_ENTRY_LAYER_ID = 0;

void initMap() {
  String refMap = "Control/Map/Map";

  setMapZoom(refMap, 15.0f);

  // Shape
  isEntity = true;
  queryName = "Shape";
  querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Shape'";
  ps = createPointStyle(10, Color.YELLOW, 0.2f, 0.5f);
  ls = createLineStyle(10, Color.YELLOW, 0.05f, 0.3f, null);
  pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
  ts = createTextStyle(10, Color.YELLOW, 30, Typeface.SANS_SERIF);
  showDatabaseLayer(refMap, "Shape Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);

  // Data entry layer
  DATA_ENTRY_LAYER_ID = createCanvasLayer(refMap, DATA_ENTRY_LAYER);
  setSelectedLayer(refMap, DATA_ENTRY_LAYER);
}

// Copy/pasted from autogenerator's definition of saveTabGroup
void saveShape() {
  String  tabgroup            = "Shape";
  Boolean enableAutosave      = true;
  String  id                  = getUuid(tabgroup);
  String  mapRef              = "Control/Map/Map";
  List    geometry            = getGeometryList(mapRef, DATA_ENTRY_LAYER_ID);
  List    attributes          = null;
  String  parentTabgroup_     = parentTabgroup;
  String  parentTabgroupUuid_ = getUuid(parentTabgroup_);
  Boolean userWasSet          = !username.equals("");

  String callback = "";
  callback += "; clearGeometry()";
  callback += "; onSave" + getArchEntTypePascalCased(tabgroup) + "__()";

  parentTabgroup = null;

  SaveCallback saveCallback  = new SaveCallback() {
    onSave(uuid, newRecord) {
      setUuid(tabgroup, uuid);
      // Make a child-parent relationship if need be.
      if (
          newRecord &&
          !isNull(parentTabgroup_) &&
          !isNull(parentTabgroupUuid_)
      ) {
        String rel = "";
        rel += parentTabgroup_.replaceAll("_", " ");
        rel += " - ";
        rel += tabgroup.replaceAll("_", " ");
        saveEntitiesToHierRel(
          rel,
          parentTabgroupUuid_,
          uuid,
          "Parent Of",
          "Child Of",
          callback
        );
      } else {
        execute(callback);
      }

      // This fixes an interesting bug. Without this, if a user was not set
      // (by calling `setUser`) at the time `saveShape` was first called, but
      // set by the time `onSave` was called, the tab group is saved correctly
      // the first time only.
      //
      // Adding this allows subsequent saves to succeed. Presumably it plays
      // some role in helping FAIMS associate the correct user with a record.
      if (!userWasSet) {
        saveShape();
      }

    }
    onError(message) {
      showToast(message);
    }
  };

  saveTabGroup(tabgroup, id, geometry, attributes, saveCallback, enableAutosave);
}

void clearGeometry() {
  String  mapRef   = "Control/Map/Map";
  List    geometry = getGeometryList(mapRef, DATA_ENTRY_LAYER_ID);

  if (geometry == null)     return;
  if (geometry.size() == 0) return;

  for (geom : geometry) {
    print("Geometry cleared:" + geom.userData.geomId);
    clearGeometry(mapRef, geom.userData.geomId);
  }
}

boolean checkForGeometry() {
  String mapRef = "Control/Map/Map";

  List geometry = getGeometryList(mapRef, DATA_ENTRY_LAYER_ID);
  if (geometry == null || geometry.size() == 0) {
    String head = "Cannot Create Shape";
    String body = "At least one shape must be present on the data entry layer.";
    showWarning(head, body);

    return false;
  } else {
    return true;
  }
}

void centreMe() {
  String mapRef = "Control/Map/Map";

  if(!isExternalGPSOn() && !isInternalGPSOn()) {
    showToast("{GPS_Not_Initialised}");
  } else {
    centerOnCurrentPosition(mapRef);
  }
}

void refreshMap() {
  String mapRef = "Control/Map/Map";
  refreshMap(mapRef);
}

// Overrides autogenerated definition
void onClickControlMapCreateShape () {
  if (checkForGeometry()) {
    parentTabgroup__ = "Control";
    newShape();
  }
}

// Overrides autogenerated definition
void onShowShape () {
  saveShape();
}

initMap();
addOnEvent("Control/Map/Centre_Me", "click", "centreMe()");
addOnEvent("Control/Map",           "show",  "refreshMap()");

/****************************** DATE POPULATION *******************************/
  void setDayMonth() {
    ref     = "Burial_Mound/General/Date";

    fmt     = "dd MMM";
    date    = new Date();
    dateFmt = new java.text.SimpleDateFormat(fmt);
    dateStr = dateFmt.format(date);

    setFieldValue(ref, dateStr);
  }

  addOnEvent("Burial_Mound", "create", "setDayMonth()");

/********************************* TABLE VIEW *********************************/
  query  = "select uuid, 'identifier' as attributename, response, -1 as aentcountorder ";
  query += " from latestNonDeletedArchEntFormattedIdentifiers ";
  query += "where aenttypename='Burial Mound'";
  query += " union ";
  query += "select uuid, attributename, group_concat(format(formatstring, vocabname, measure, freetext, certainty), appendcharacterstring) as response, aentcountorder ";
  query += "  from ( ";
  query += "    select uuid, attributename, aenttypename, formatstring, vocabname, measure, freetext, certainty, appendcharacterstring, aentcountorder, vocabcountorder, attributeid ";
  query += "    from latestNonDeletedArchent ";
  query += "      JOIN aenttype using (aenttypeid) ";
  query += "      join idealaent using (aenttypeid) ";
  query += "      join attributekey using (attributeid) ";
  query += "      join latestNonDeletedAentValue using (uuid, attributeid) ";
  query += "      left outer join vocabulary using (attributeid, vocabid) ";
  query += "    order by uuid, aentcountorder, vocabcountorder ";
  query += "  ) ";
  query += "  where aenttypename='Burial Mound' ";
  query += "  and attributename in ('Object ID', 'Type', 'Date', 'Surrounding Landuse', 'Surface Landuse', 'Height Max', 'Length Max') ";
  query += "  group by uuid, attributeid ";
  query += "  having response is not null ";
  query += "  order by uuid, aentcountorder; ";

  tableRef       = "Control/Table/Table";
  headers        = new ArrayList();
  actionName     = "Load";
  actionIdx      = 0;
  actionCallback = "loadEntityFromTable()";

  headers.add("");
  headers.add("Object ID");
  headers.add("Type");
  headers.add("Date");
  headers.add("Surrounding Landuse");
  headers.add("Surface Landuse");
  headers.add("Height Max");
  headers.add("Length Max");

  populateTable() {
    populateTablePivot(tableRef, query, headers, actionName, actionIdx, actionCallback);
  }

  loadEntityFromTable() {
    uuid = getTableValue();
    loadEntityFrom(uuid); // Auto-gen'd function
  }

  addOnEvent(tableRef, "show", "populateTable()");

/*********************************** LOGIN ************************************/
  // Overrides autogenerated definition
  selectUser () {
    String userVocabId  = getFieldValue(userMenuPath);
    if (isNull(userVocabId))
      return;

    String userQ = "SELECT userid,fname,lname,email,password FROM user " +
                   "WHERE  userid='" + userVocabId + "';";
    FetchCallback callback = new FetchCallback() {
      onFetch(result) {
        user = new User(
              result.get(0),
              result.get(1),
              result.get(2),
              result.get(3),
              result.get(4)
        );
        setUser(user);
        username = result.get(1) + " " + result.get(2);
      }
    };

    fetchOne(userQ, callback);
  }

  onClickLogin () {
    showVerifyUserDialog("doUserLogin()");
  }

  onClickSignup () {
    setSyncEnabled(true);
    showCreateUserDialog("signupSuccessful()");
  }

  signupSuccessful() {
    String head  = "Signup Successful";
    String body  = "You have successfuly signed up. You may now log in as the ";
           body += "newly created user.";

    showWarning(head, body);
    populateListForUsers();
  }

  doUserLogin () {
    newTab("Control", true);
  }

  addOnEvent("User/User/Log_in",  "click", "onClickLogin()");
  addOnEvent("User/User/Sign_up", "click", "onClickSignup()");



/******************************************************************************/
/*                                    INIT                                    */
/*                                                                            */
/* Stuff which needs to be done last.                                         */
/******************************************************************************/
bindOnEvents();
